# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_ProductReviewsGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt


type ProductReview {
    reply: ReviewReplies @doc(description: "An array of review reply") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Reply")
    customize: ReviewCustomize @doc(description: "An object of review customize") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Customize")
    galleries: ReviewGallery @doc(description: "An object of review gallery") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Gallery")

}

type ReviewReply {
    reply_id: Int @doc(description: "Id of reply")
    review_id: Int @doc(description: "Id of review reply")
    reply_title: String @doc(description: "title field")
    reply_comment: String @doc(description: "comment field")
    user_name: String @doc(description: "user_name filed")
    parent_reply_id: Int @doc(description: "Id of parent_reply_id")
    website: String @doc(description: "website filed")
    avatar_url: String @doc(description: "avatar_url filed")
    created_at: String @doc(description: "created_at filed")
}

type ReviewCustomize {
    advantages: String @doc(description: "advantages of reply")
    disadvantages: String @doc(description: "disadvantages of reply")
    review_id: Int @doc(description: "Review Id of review reply")
    average: Int @doc(description: "average field")
    count_helpful: Int @doc(description: "count_helpful field")
    count_unhelpful: Int @doc(description: "count_unhelpful filed")
    total_helpful: Int @doc(description: "total_helpful filed")
    report_abuse: String @doc(description: "report_abuse filed")
}

type ReviewGallery {
    id: Int @doc(description: "Id of reply")
    review_id: Int @doc(description: "Id of review reply")
    label: String @doc(description: "title field")
    images: [String] @doc(description: "gallery images field")
}

type Query {
    productReviewReplies(
        review_id: Int! @doc(description: "filter by review id."),
        filter: ReviewReplyFilterInput @doc(description: "Identifies which question attributes to search for and return."),
        pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ReviewReplySortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
   ):ReviewReplies @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Replies") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Mutation {
    createProductReviewReply(input: CreateProductReviewReplyInput!): CreateProductReviewReplyOutput! @doc(description: "Creates a product review reply for a review of product") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\CreateProductReviewReply")
}

type ReviewReplies {
    total_count: Int @doc(description: "The number of items returned")
    items: [ReviewReply] @doc(description: "An array of items that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Reply\\SortFields")
}

type CreateProductReviewReplyOutput {
    reply: ReviewReply! @doc(description: "Contains the completed product review reply")
}

input CreateProductReviewReplyInput {
    parent_reply_id: Int @doc(description: "Id of parent_reply_id")
    review_id: Int! @doc(description: "review_id field")
    reply_title: String @doc(description: "reply_title field")
    reply_comment: String! @doc(description: "reply_comment field")
    user_name: String @doc(description: "user_name field")
    website: String @doc(description: "website field")
    email_address: String @doc(description: "email_address field")
}

input CreateProductReviewInput {
    email: String @doc(description: "The Email of the reviewed product")
    advantages: String @doc(description: "The advantages for product review")
    disadvantages: String @doc(description: "The disadvantages for product review")
    images: [ReviewGalleryImageInput] @doc(description: "The gallery image for product review")
}

input ReviewGalleryImageInput {
    src: String @doc(description: "The Email of the reviewed product")
}

input ReviewReplyFilterInput  @doc(description: "ReviewReplyFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    reply_id: FilterTypeInput @deprecated(reason: "Filter reply_id)
    review_id: FilterEqualTypeInput @deprecated(reason: "Filter review_id")
    reply_title: FilterTypeInput @deprecated(reason: "Filter reply_title")
    reply_comment: FilterMatchTypeInput @deprecated(reason: "Filter reply_comment")
    user_name: FilterTypeInput @deprecated(reason: "Filter user_name")
    parent_reply_id: FilterTypeInput @deprecated(reason: "Filter parent_reply_id)
    created_at: FilterTypeInput @deprecated(reason: "Filter created_at")
    or: ReviewReplyFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input ReviewReplySortInput @doc(description: "ReviewReplySortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending delivery persons. It's possible to sort delivery persons using searchable attributes with enabled 'Use in Filter Options' option")
{
    reply_id: SortEnum @doc(description: "Sort by the reply_id.")
    review_id: SortEnum @doc(description: "Sort by the review_id.")
    reply_title: SortEnum @doc(description: "Sort by the reply_title.")
    user_name: SortEnum @doc(description: "Sort by the user_name.")
    parent_reply_id: SortEnum @doc(description: "Sort by the parent_reply_id.")
    created_at: SortEnum @doc(description: "Sort by the created_at (default).")
}

enum ReviewSortingType {
    default
    helpful
    rating
}

type StoreConfig @doc(description: "The type contains information about a store config") {
    lof_reviews_enabled : String @doc(description: "Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_show_on_customer_dashboard : String @doc(description: "Indicates whether Show advanced reviews on customer dashboard. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_verify_purchased_code : String @doc(description: "Indicates whether allow verify purchased code before review. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_required_verify_purchased : String @doc(description: "Indicates whether require verify purchased code before review. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_auto_verify : String @doc(description: "Indicates whether auto verify purchase code. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_sorting : String @doc(description: "Indicates whether show sorting. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_sort_type : ReviewSortingType @doc(description: "Indicates whether sorting type. Enum Values: default, helpful, rating")
    lof_reviews_enable_search : String @doc(description: "Indicates whether show search. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_pros_cons : String @doc(description: "Indicates whether show pros and cons. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_admin_reply : String @doc(description: "Indicates whether show admin reply. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_allow_upload : String @doc(description: "Indicates whether allow upload images for ratings. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_limit_upload_image : Int @doc(description: "Indicates whether limit maximum images can uploading. Number value")
    lof_reviews_image_width : Int @doc(description: "Indicates whether image width. Number value")
    lof_reviews_image_height : Int @doc(description: "Indicates whether image height. Number value")
}
