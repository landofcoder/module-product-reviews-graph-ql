# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_ProductReviewsGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

interface ProductInterface {
    advreview(
        search: String @doc(description: "search by keyword."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return."),
        sortBy: ReviewSortingType = default @doc(description: "sorting by: helpful, rating, latest, oldest, recommended, verified, default."),
    ): ReviewsData! @doc(description: "The list of products advanced reviews.") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Reviews")
}

type ReviewsData {
    totalRecords: Int @doc(description: "The average of all the ratings given to the product.")
    ratingSummary: Float! @doc(description: "The average of all the ratings given to the product.")
    ratingSummaryValue: Float! @doc(description: "The average of all the ratings value given to the product.")
    recomendedPercent: Float @doc(description: "The percent of ratings.")
    totalRecordsFiltered: Int @doc(description: "The totals of filtered records.")
    detailedSummary: DetailedSummary @doc(description: "details of review summary.")
    items: [Review]! @doc(description: "An array of product reviews.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
}

type Review @doc(description: "Details of a product review") {
    review_id: Int! @doc(description: "review_id field.")
    created_at: String @doc(description: "created_at field.")
    answer: String @doc(description: "answer field.")
    verified_buyer: Int @doc(description: "verified_buyer field.")
    is_recommended: Boolean @doc(description: "is_recommended field.")
    detail_id: Int @doc(description: "detail_id field.")
    title: String @doc(description: "title field.")
    detail: String @doc(description: "detail field.")
    nickname: String @doc(description: "nickname field.")
    like_about: String @doc(description: "like_about field.")
    not_like_about: String @doc(description: "not_like_about field.")
    guest_email: String @doc(description: "guest_email field.")
    plus_review: Int @doc(description: "plus_review field.")
    minus_review: Int @doc(description: "plus_review field.")
    report_abuse: Int @doc(description: "report_abuse field.")
    rating_votes: [RatingVote] @doc(description: "rating_votes field.")
    images: [Images] @doc(description: "images field.")
    comments: [Comment] @doc(description: "review comment, review reply list, field.")
}

type Reviews @doc(description: "Details of a product reviews") {
    items: [Review]! @doc(description: "An array of product reviews.")
    total_count: Int @doc(description: "The number of items returned")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
}

type Images {
    full_path: String @doc(description: "full_path field.")
    resized_path: String @doc(description: "resized_path field.")
}

type Comment {
    id: Int @doc(description: "comment id, reply id")
    review_id: Int @doc(description: "review_id field")
    parent_id: Int @doc(description: "parent_id field")
    message: String @doc(description: "message field")
    nickname: String @doc(description: "nickname field")
    email: String @doc(description: "email field")
    status: Int @doc(description: "status field")
    created_at: String @doc(description: "created_at field")
    updated_at: String @doc(description: "updated_at field")
}

type RatingVote {
    vote_id: Int @doc(description: "vote_id field.")
    rating_id: Int! @doc(description: "rating_id field.")
    option_id: Int @doc(description: "option_id field.")
    review_id: Int @doc(description: "review_id field.")
    percent: Int @doc(description: "percent field.")
    value: Int @doc(description: "value field.")
    rating_code: String @doc(description: "rating_code field.")
}

type DetailedSummary {
    one: Int! @doc(description: "the total of rating one.")
    two: Int! @doc(description: "the total of rating two.")
    three: Int! @doc(description: "the total of rating three.")
    four: Int! @doc(description: "the total of rating four.")
    five: Int! @doc(description: "the total of rating five.")
}

type ReviewComments {
    total_count: Int @doc(description: "The number of items returned")
    items: [Comment] @doc(description: "An array of items that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Comment\\SortFields")
}

type Query {
    comments(
        review_id: Int! @doc(description: "filter by review id.")
        filter: ReviewCommentFilterInput @doc(description: "Identifies which question attributes to search for and return.")
        pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: ReviewCommentSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
   ):ReviewComments @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\Product\\Review\\Comments") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Mutation {
    createComment(input: CreateProductReviewCommentInput!): CreateProductReviewCommentOutput! @doc(description: "Creates a product review reply for a review of product") @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\CreateProductReviewComment")

    likeReview(review_id: Int!): Boolean @doc(description: "Like a review by id") @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\LikeReview")

    unlikeReview(review_id: Int!): Boolean @doc(description: "Un Like a review by id") @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\UnLikeReview")

    reportReview(review_id: Int!): Boolean @doc(description: "Report a review by id") @resolver(class: "\\Lof\\ProductReviewsGraphQl\\Model\\Resolver\\ReportReview")
}

type CreateProductReviewCommentOutput {
    comment: Comment! @doc(description: "Contains the completed product review comment")
}

input CreateProductReviewCommentInput {
    parent_id: Int @doc(description: "Id of parent_id")
    review_id: Int! @doc(description: "review_id field")
    title: String @doc(description: "title field")
    message: String! @doc(description: "message field")
    nickname: String @doc(description: "nickname field")
    website: String @doc(description: "website field")
    email: String @doc(description: "email field")
}

input CreateProductReviewInput {
    email: String @doc(description: "The Email of the reviewed product")
    advantages: String @doc(description: "The advantages for product review")
    disadvantages: String @doc(description: "The disadvantages for product review")
    images: [ReviewGalleryImageInput] @doc(description: "The gallery image for product review")
}

input ReviewGalleryImageInput {
    src: String @doc(description: "The Email of the reviewed product")
}

input ReviewCommentFilterInput @doc(description: "ReviewCommentFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    id: FilterTypeInput @doc(description: "Filter id")
    title: FilterTypeInput @doc(description: "Filter title")
    nickname: FilterTypeInput @doc(description: "Filter nickname")
    created_at: FilterTypeInput @doc(description: "Filter created_at")
    or: ReviewCommentFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input ReviewCommentSortInput @doc(description: "ReviewCommentSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending delivery persons. It's possible to sort delivery persons using searchable attributes with enabled 'Use in Filter Options' option")
{
    id: SortEnum @doc(description: "Sort by the id.")
    review_id: SortEnum @doc(description: "Sort by the review_id.")
    title: SortEnum @doc(description: "Sort by the title.")
    nickname: SortEnum @doc(description: "Sort by the nickname.")
    parent_id: SortEnum @doc(description: "Sort by the parent_id.")
    created_at: SortEnum @doc(description: "Sort by the created_at (default).")
    updated_at: SortEnum @doc(description: "Sort by the updated_at.")
}

enum ReviewSortingType  @doc(description: "ReviewSortingType use for sorting advanced reviews, default sorting = default ") {
    default
    helpful
    rating
    latest
    oldest
    recommended
    verified
}

type StoreConfig @doc(description: "The type contains information about a store config") {
    lof_reviews_enabled : String @doc(description: "Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_show_on_customer_dashboard : String @doc(description: "Indicates whether Show advanced reviews on customer dashboard. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_verify_purchased_code : String @doc(description: "Indicates whether allow verify purchased code before review. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_required_verify_purchased : String @doc(description: "Indicates whether require verify purchased code before review. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_auto_verify : String @doc(description: "Indicates whether auto verify purchase code. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_sorting : String @doc(description: "Indicates whether show sorting. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_sort_type : ReviewSortingType @doc(description: "Indicates whether sorting type. Enum Values: default, helpful, rating")
    lof_reviews_enable_search : String @doc(description: "Indicates whether show search. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_pros_cons : String @doc(description: "Indicates whether show pros and cons. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_enable_admin_reply : String @doc(description: "Indicates whether show admin reply. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_allow_upload : String @doc(description: "Indicates whether allow upload images for ratings. Possible values: 1 (Yes) and 0 (No)")
    lof_reviews_limit_upload_image : Int @doc(description: "Indicates whether limit maximum images can uploading. Number value")
    lof_reviews_image_width : Int @doc(description: "Indicates whether image width. Number value")
    lof_reviews_image_height : Int @doc(description: "Indicates whether image height. Number value")
}
